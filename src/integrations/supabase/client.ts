
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://yiunhkcbqdbhxjrdwgaq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlpdW5oa2NicWRiaHhqcmR3Z2FxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE2OTA1NjAsImV4cCI6MjA1NzI2NjU2MH0.PBvJvi-zF6dy8kIous7X_qw5LAAOv4ie8S4BMuStR10";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true, // Enable auto refresh for tokens
      persistSession: true,
      storageKey: 'tripscape-auth-token',
      detectSessionInUrl: true, // Enable URL detection to handle redirects properly
      flowType: 'pkce',
      debug: process.env.NODE_ENV === 'development' // Only enable debug in development
    },
    global: {
      headers: {
        'X-Client-Info': 'tripscape-app'
      }
    },
    // Set reasonable timeout to prevent hanging requests
    realtime: {
      timeout: 10000 // 10 seconds
    }
  }
);

// Enhanced helper function to completely clear auth data
export const clearAuthData = () => {
  console.log('Clearing all auth data with enhanced cleanup');
  
  // Check if a clear operation is already in progress to prevent loops
  if (sessionStorage.getItem('manual-clear-in-progress') === 'true') {
    console.log('Clear operation already in progress, skipping duplicate call');
    return;
  }
  
  try {
    // Mark that we're starting a clear operation
    sessionStorage.setItem('manual-clear-in-progress', 'true');
    
    // IMPORTANT: DO NOT make any Supabase API calls during this process
    // This avoids potential auth loops with callbacks firing
    
    // Clear ALL localStorage items without filtering
    localStorage.clear();
    
    // Clear ALL sessionStorage items except our flag
    for (let i = 0; i < sessionStorage.length; i++) {
      const key = sessionStorage.key(i);
      if (key && key !== 'manual-clear-in-progress') {
        sessionStorage.removeItem(key);
      }
    }
    
    // Clear all cookies by setting expired dates
    document.cookie.split(";").forEach(function(c) {
      const cookieName = c.trim().split("=")[0];
      if (cookieName) {
        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=${window.location.hostname};`;
      }
    });
    
    console.log('Enhanced auth data cleanup complete');
    
    // Reset the manual-clear flag after a longer delay to prevent loops
    setTimeout(() => {
      console.log('Removing manual-clear-in-progress flag');
      sessionStorage.removeItem('manual-clear-in-progress');
    }, 5000); // Extended to 5 seconds
    
  } catch (error) {
    console.error('Error during enhanced auth data clearing:', error);
    // Still reset the flag in case of error
    setTimeout(() => {
      sessionStorage.removeItem('manual-clear-in-progress');
    }, 5000);
  }
};

// Add a helper to check token validity without triggering auto-refresh
export const isTokenExpired = async (): Promise<boolean> => {
  try {
    const { data } = await supabase.auth.getSession();
    if (!data.session) return true;
    
    // Get expiry time from session
    const expiresAt = data.session.expires_at;
    if (!expiresAt) return true;
    
    // Add buffer time (5 minutes) to avoid edge cases
    const bufferTime = 5 * 60; // 5 minutes in seconds
    const currentTime = Math.floor(Date.now() / 1000);
    
    return currentTime > expiresAt - bufferTime;
  } catch (error) {
    console.error('Error checking token expiry:', error);
    return true; // Assume expired if we can't check
  }
};
